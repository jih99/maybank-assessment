openapi: 3.0.1
info:
  title: Customer and Product API
  description: API for managing customer and product information
  version: 1.0.0

servers:
  - url: http://localhost:8080
    description: Local server

tags:
  - name: Customer
    description: Endpoints related to customers
  - name: Product
    description: Endpoints related to products

paths:
  /customers:
    post:
      summary: Create a new customer
      tags:
        - Customer
      requestBody:
        description: Customer details to create
        required: true
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/CustomerRequestBody'
      responses:
        '201':
          description: Customer created successfully
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Customer'

  /customers/{id}:
    get:
      summary: Get a customer by ID
      tags:
        - Customer
      parameters:
        - name: id
          in: path
          required: true
          description: ID of the customer to retrieve
          schema:
            type: integer
      responses:
        '200':
          description: The requested customer
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Customer'
        '404':
          description: Customer not found
    put:
      summary: Update a customer by ID
      tags:
        - Customer
      parameters:
        - name: id
          in: path
          required: true
          description: ID of the customer to update
          schema:
            type: integer
      requestBody:
        description: Updated customer details
        required: true
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/CustomerRequestBody'
      responses:
        '200':
          description: Customer updated successfully
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Customer'
        '404':
          description: Customer not found
    delete:
      summary: Delete a customer by ID
      tags:
        - Customer
      parameters:
        - name: id
          in: path
          required: true
          description: ID of the customer to delete
          schema:
            type: integer
      responses:
        '204':
          description: Customer deleted successfully
        '404':
          description: Customer not found

  /products:
    post:
      summary: Create a new product
      tags:
        - Product
      requestBody:
        description: Product details to create
        required: true
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/ProductRequestBody'
      responses:
        '201':
          description: Product created successfully
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Product'

  /products/{id}:
    get:
      summary: Get a product by ID
      tags:
        - Product
      parameters:
        - name: id
          in: path
          required: true
          description: ID of the product to retrieve
          schema:
            type: integer
      responses:
        '200':
          description: The requested product
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Product'
        '404':
          description: Product not found
    put:
      summary: Update a product by ID
      tags:
        - Product
      parameters:
        - name: id
          in: path
          required: true
          description: ID of the product to update
          schema:
            type: integer
      requestBody:
        description: Updated product details
        required: true
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/ProductRequestBody'
      responses:
        '200':
          description: Product updated successfully
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Product'
        '404':
          description: Product not found
    delete:
      summary: Delete a product by ID
      tags:
        - Product
      parameters:
        - name: id
          in: path
          required: true
          description: ID of the product to delete
          schema:
            type: integer
      responses:
        '204':
          description: Product deleted successfully
        '404':
          description: Product not found

components:
  schemas:
    Customer:
      type: object
      properties:
        oid:
          type: integer
          format: int64
          description: Unique identifier for the customer
        firstName:
          type: string
          description: First name of the customer
        lastName:
          type: string
          description: Last name of the customer
        personalEmail:
          type: string
          format: email
          description: Personal email address of the customer
        officeEmail:
          type: string
          format: email
          description: Office email address of the customer
      required:
        - firstName
        - lastName
        - personalEmail
        - officeEmail
    CustomerRequestBody:
      type: object
      properties:
        firstName:
          type: string
          description: First name of the customer
        lastName:
          type: string
          description: Last name of the customer
        personalEmail:
          type: string
          format: email
          description: Personal email address of the customer
        officeEmail:
          type: string
          format: email
          description: Office email address of the customer
      required:
        - firstName
        - lastName
        - personalEmail
        - officeEmail

    Product:
      type: object
      properties:
        oid:
          type: integer
          format: int64
          description: Unique identifier for the product
        bookTitle:
          type: string
          description: Title of the book
        bookPrice:
          type: number
          format: float
          description: Price of the book
        bookQty:
          type: integer
          description: Quantity of the book available
      required:
        - bookTitle
        - bookPrice
        - bookQty
    ProductRequestBody:
      type: object
      properties:
        bookTitle:
          type: string
          description: Title of the book
        bookPrice:
          type: number
          format: float
          description: Price of the book
        bookQty:
          type: integer
          description: Quantity of the book available
      required:
        - bookTitle
        - bookPrice
        - bookQty
